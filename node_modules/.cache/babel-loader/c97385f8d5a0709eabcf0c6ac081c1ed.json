{"remainingRequest":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\babel-loader\\lib\\index.js!D:\\WORK\\simbir_reserve\\service-app\\node_modules\\vuetify-loader\\lib\\loader.js!D:\\WORK\\simbir_reserve\\service-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WORK\\simbir_reserve\\service-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WORK\\simbir_reserve\\service-app\\src\\components\\ScrumBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WORK\\simbir_reserve\\service-app\\src\\components\\ScrumBoard.vue","mtime":1553502732963},{"path":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WORK\\simbir_reserve\\service-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport dragula from 'dragula';\nexport default {\n  name: 'ScrumBoard',\n  props: {\n    stages: {},\n    blocks: {}\n  },\n  data: function data() {\n    return {};\n  },\n  computed: {\n    localBlocks: function localBlocks() {\n      return this.blocks;\n    }\n  },\n  methods: {\n    getBlocks: function getBlocks(status) {\n      return this.localBlocks.filter(function (block) {\n        return block.status === status;\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    dragula(this.$refs.list).on('drag', function (el) {\n      el.classList.add('is-moving');\n    }).on('drop', function (block, list) {\n      var index = 0;\n\n      for (index = 0; index < list.children.length; index += 1) {\n        if (list.children[index].classList.contains('is-moving')) break;\n      }\n\n      _this.$emit('update-block', block.dataset.blockId, list.dataset.status, index);\n    }).on('dragend', function (el) {\n      el.classList.remove('is-moving');\n      window.setTimeout(function () {\n        el.classList.add('is-moved');\n        window.setTimeout(function () {\n          el.classList.remove('is-moved');\n        }, 600);\n      }, 100);\n    });\n  }\n};",{"version":3,"sources":["ScrumBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,OAAA,MAAA,SAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA,EADA;AAEA,IAAA,MAAA,EAAA;AAFA,GAFA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA,EAAA;AAEA,GATA;AAUA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA;AACA;AAHA,GAVA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,MADA,EACA;AACA,aAAA,KAAA,WAAA,CAAA,MAAA,CAAA,UAAA,KAAA;AAAA,eAAA,KAAA,CAAA,MAAA,KAAA,MAAA;AAAA,OAAA,CAAA;AACA;AAHA,GAfA;AAoBA,EAAA,OApBA,qBAoBA;AAAA;;AACA,IAAA,OAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,CACA,EADA,CACA,MADA,EACA,UAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,WAAA;AACA,KAHA,EAIA,EAJA,CAIA,MAJA,EAIA,UAAA,KAAA,EAAA,IAAA,EAAA;AACA,UAAA,KAAA,GAAA,CAAA;;AACA,WAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,IAAA,CAAA,QAAA,CAAA,MAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,QAAA,CAAA,KAAA,EAAA,SAAA,CAAA,QAAA,CAAA,WAAA,CAAA,EAAA;AACA;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,cAAA,EAAA,KAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,EAAA,KAAA;AACA,KAVA,EAWA,EAXA,CAWA,SAXA,EAWA,UAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,WAAA;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,YAAA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA;AACA,QAAA,MAAA,CAAA,UAAA,CAAA,YAAA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA;AACA,SAFA,EAEA,GAFA;AAGA,OALA,EAKA,GALA;AAMA,KAnBA;AAoBA;AAzCA,CAAA","sourcesContent":["<template>\r\n    <div class=\"drag-container\">\r\n        <ul class=\"drag-list\">\r\n            <li v-for=\"stage in stages\" class=\"drag-column\" :class=\"{['drag-column-' + stage]: true}\" :key=\"stage\">\r\n        <span class=\"drag-column-header\">\r\n          <slot :name=\"stage\">\r\n            <h2>{{ stage }}</h2>\r\n          </slot>\r\n        </span>\r\n                <div class=\"drag-options\"></div>\r\n                <ul class=\"drag-inner-list\" ref=\"list\" :data-status=\"stage\">\r\n                    <li class=\"drag-item\" v-for=\"block in getBlocks(stage)\" :data-block-id=\"block.id\" :key=\"block.id\">\r\n                        <slot :name=\"block.id\">\r\n                            <strong>{{ block.status }}</strong>\r\n                            <div>{{ block.id }}</div>\r\n                        </slot>\r\n                    </li>\r\n                </ul>\r\n                <div class=\"drag-column-footer\">\r\n                    <slot :name=\"`footer-${stage}`\"></slot>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import dragula from 'dragula';\r\n\r\n    export default {\r\n        name: 'ScrumBoard',\r\n        props: {\r\n            stages: {},\r\n            blocks: {},\r\n        },\r\n        data() {\r\n            return {\r\n            };\r\n        },\r\n        computed: {\r\n            localBlocks() {\r\n                return this.blocks;\r\n            },\r\n        },\r\n        methods: {\r\n            getBlocks(status) {\r\n                return this.localBlocks.filter(block => block.status === status);\r\n            },\r\n        },\r\n        mounted() {\r\n            dragula(this.$refs.list)\r\n                .on('drag', (el) => {\r\n                    el.classList.add('is-moving');\r\n                })\r\n                .on('drop', (block, list) => {\r\n                    let index = 0;\r\n                    for (index = 0; index < list.children.length; index += 1) {\r\n                        if (list.children[index].classList.contains('is-moving')) break;\r\n                    }\r\n                    this.$emit('update-block', block.dataset.blockId, list.dataset.status, index);\r\n                })\r\n                .on('dragend', (el) => {\r\n                    el.classList.remove('is-moving');\r\n                    window.setTimeout(() => {\r\n                        el.classList.add('is-moved');\r\n                        window.setTimeout(() => {\r\n                            el.classList.remove('is-moved');\r\n                        }, 600);\r\n                    }, 100);\r\n                });\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"sourceRoot":"src/components"}]}